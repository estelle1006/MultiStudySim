case_0.1 <- readRDS('~/Desktop/Geographic Data/pollution/pollution_result_new.rds')
case_0.1_en <- readRDS('~/Desktop/Geographic Data/pollution/pollution_result_ensemble.rds')
library(ggplot2)
library(grid)
library(gridExtra)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
#datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
#ciMult <- qt(conf.interval/2 + .5, datac$N-1)
#datac$ci <- datac$se * ciMult
return(datac)
}
get_long_data <- function(output){
tt_elnet <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',1)))[,c(1:6)], weighting, measurement, stacking:merge, factor_key=TRUE),'elnet')
tt_nnet <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',2)))[,c(1:6)], weighting, measurement, stacking:merge, factor_key=TRUE),'Nnet')
#tt_boost <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',3)))[,c(1:5)], weighting, measurement, stacking:merge, factor_key=TRUE),'boost')
tt_boost <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',3)))[,c(1:6)], weighting, measurement, stacking:merge, factor_key=TRUE),'boost')
#tt_rf <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',4)))[,c(1:5)], weighting, measurement, stacking:merge, factor_key=TRUE),'rf')
tt_bagtree <- cbind(tidyr::gather(data.frame(do.call(rbind,lapply(output,'[[',4)))[,c(1:6)], weighting, measurement, stacking:merge, factor_key=TRUE),'treebag')
colnames(tt_elnet)=colnames(tt_nnet)=colnames(tt_boost)=colnames(tt_bagtree)
plotting <- data.frame(rbind(tt_elnet,tt_nnet,tt_boost,tt_bagtree))
colnames(plotting)[3] <- 'Learners'
plotting$measurement <- as.numeric(plotting$measurement)
#plotting$measurement <- log(plotting$measurement)
#plotting <- cbind(plotting,size)
#names(plotting)[4] <- 'Size'
#re <- ggplot(data = plotting, aes(x=Learners, y=measurement,fill=condition)) + geom_boxplot()+ xlab("Learners") + ylab("log(RMSE)")
return(plotting)
}
get_ensemble <- function(output){
tt_ensemble <- cbind(tidyr::gather(data.frame(do.call(rbind,output))[,c(1:4)], weighting, measurement, stacking:simp_avg, factor_key=TRUE),'ensemble')
plotting <- data.frame(tt_ensemble)
plotting$measurement <- as.numeric(unlist(plotting$measurement))
#plotting$measurement <- log(plotting$measurement)
#plotting <- cbind(plotting,size)
names(plotting)[3] <- 'Learners'
#names(plotting)[4] <- 'Size'
return(plotting)
}
dat_ensemble <- get_ensemble(case_0.1)
dat_ensemble <- get_ensemble(case_0.1_en)
dat_ensemble_plot <- summarySE(dat_ensemble, measurevar="measurement", groupvars=c("weighting","Learners"))
dat_0.1 <- get_long_data(case_0.1)
dat_result_ind <- summarySE(dat_0.1, measurevar="measurement", groupvars=c("weighting",'Learners'))
dat_result <- rbind(dat_result_ind,dat_ensemble_plot)
pd = position_dodge(width = 0.5)
p_p <- ggplot(dat_result, aes(x=Learners, y=measurement, fill=weighting)) +
geom_errorbar(aes(ymin=measurement-sd, ymax=measurement+sd), width=0.1,position = pd) +
geom_line(position = pd) + xlab('Learners') + ylab("RMSE") +
geom_point(position = pd)
#+ scale_x_continuous(breaks = dat_elnet_plot$Size) + theme(axis.text.x = element_text(angle = 0))
p_p
ggplot(rbind(dat_0.1,dat_ensemble), aes(x=Learners, y=measurement, fill=weighting)) +
geom_boxplot() + xlab('Learners') + ylab("RMSE")
ggplot(rbind(dat_0.1,dat_ensemble), aes(x=Learners, y=measurement, fill=weighting)) +
geom_boxplot() + xlab('Learners') + ylab("RMSE") +
theme(axis.text.x = element_text(angle = 0,size=15),legend.text = element_text(size = 15))
ggplot(rbind(dat_0.1,dat_ensemble), aes(x=Learners, y=measurement, fill=weighting)) +
geom_boxplot() + xlab('Learners') + ylab("RMSE") +
theme(axis.text.x = element_text(angle = 0,size=15),legend.text = element_text(size = 15), legend.title = element_text(size = 16))
ggplot(rbind(dat_0.1,dat_ensemble), aes(x=Learners, y=measurement, fill=weighting)) +
geom_boxplot() + xlab('Learners') + ylab("RMSE") +
theme(axis.text.x = element_text(angle = 0,size=18),legend.text = element_text(size = 18), legend.title = element_text(size = 20))
ggplot(rbind(dat_0.1,dat_ensemble), aes(x=Learners, y=measurement, fill=weighting)) +
geom_boxplot() + xlab('Learners') + ylab("RMSE") +
theme(axis.text.x = element_text(angle = 0,size=18),legend.text = element_text(size = 18),
legend.title = element_text(size = 20),axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
compare_dat_elnet <- read.csv('~/Desktop/master_project/base_case/single_covariate_stacking_int/Stacking_with_int_Tree/compare_dat_elnet.csv')
compare_dat_boost <- read.csv('~/Desktop/master_project/base_case/single_covariate_stacking_int/Stacking_with_int_Tree/compare_dat_boost.csv')
compare_dat_Nnet <- read.csv('~/Desktop/master_project/base_case/single_covariate_stacking_int/Stacking_with_int_Tree/compare_dat_Nnet.csv')
compare_dat_tree <- read.csv('~/Desktop/master_project/base_case/single_covariate_stacking_int/Stacking_with_int_Tree/compare_dat_tree.csv')
compare_plot <- function(dat,size,learner){
dat <- dat[-which(dat$Weight %in% c('Single 1','Single 2')),]
p_plot <- ggplot(dat, aes(x=X_value, y=pred, shape=Weight, color=Weight)) +
geom_point() +
ggtitle(paste(learner,'predictors vs. X for different weighiting methods X Sigma = ', size))
return(p_plot)
}
compare_plot(compare_dat_tree,1,'tree')
compare_plot <- function(dat,size,learner){
dat <- dat[-which(dat$Weight %in% c('Single 1','Single 2','Stacking','Stacking_wz')),]
p_plot <- ggplot(dat, aes(x=X_value, y=pred, shape=Weight, color=Weight)) +
geom_point() +
ggtitle(paste(learner,'Sigma = ', size))
return(p_plot)
}
compare_plot(compare_dat_tree,1,'tree')
compare_plot <- function(dat,size,learner){
dat <- dat[-which(dat$Weight %in% c('Single 1','Single 2','Stacking','Stacking_wz')),]
p_plot <- ggplot(dat, aes(x=X_value, y=pred, shape=Weight, color=Weight)) +
geom_point() +
ggtitle(paste(learner,'Sigma = ', size)) +
theme(axis.text.x = element_text(angle = 0,size=18),legend.text = element_text(size = 18),
legend.title = element_text(size = 20),axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
return(p_plot)
}
compare_plot(compare_dat_tree,1,'tree')
compare_plot <- function(dat,size,learner){
dat <- dat[-which(dat$Weight %in% c('Single 1','Single 2','Stacking','Stacking_wz')),]
p_plot <- ggplot(dat, aes(x=X_value, y=pred, shape=Weight, color=Weight)) +
geom_point() +
ggtitle(paste(learner,'Sigma = ', size)) +
theme(axis.text.x = element_text(angle = 0,size=18),legend.text = element_text(size = 18),
legend.title = element_text(size = 20),axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18), plot.title = element_text(size = 20))
return(p_plot)
}
compare_plot(compare_dat_tree,1,'Treebag')
grid.arrange(compare_plot(compare_dat_elnet,1,'Elnet'),compare_plot(compare_dat_Nnet,1,'Nnet'),
compare_plot(compare_dat_boost,1,'Boosting'),compare_plot(compare_dat_tree,1,'Treebag'),
ncol=2,top=textGrob('Single covariate X vs. Y',gp=gpar(fontsize=20,font=3)))
grid.arrange(compare_plot(compare_dat_elnet,1,'Elnet'),compare_plot(compare_dat_Nnet,1,'Nnet'),
compare_plot(compare_dat_boost,1,'Boosting'),compare_plot(compare_dat_tree,1,'Treebag'),
ncol=2)
